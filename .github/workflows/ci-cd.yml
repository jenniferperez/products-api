name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  prepare:
    name: Prepare Environment
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v4
        id: cache
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-environment
          path: |
            node_modules/
            package.json
            package-lock.json
            src/
            .eslintrc.js
            jest.config.js

  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-environment
          path: ./

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Run ESLint
        run: npm run lint

      - name: Generate lint reports
        run: |
          mkdir -p reports
          npm run lint:html

      - name: Upload lint artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lint-reports
          path: reports/

  test-coverage:
    name: Tests & Coverage
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-environment
          path: ./

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Run unit tests
        run: npm test

      - name: Generate coverage report
        run: npm run test:coverage

      - name: Upload to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./src/test/coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
        if: always()

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-coverage-reports
          path: |
            src/test/coverage/

  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: [prepare, lint, test-coverage]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          echo "üöÄ Initiating deployment to Render..."
          DEPLOY_RESPONSE=$(curl -X POST "https://api.render.com/v1/services/${RENDER_SERVICE_ID}/deploys" \
            -H "accept: application/json" \
            -H "authorization: Bearer ${RENDER_API_KEY}" \
            -H "content-type: application/json" \
            --silent --show-error)
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ Deployment initiated successfully"
          else
            echo "‚ùå Failed to initiate deployment"
            exit 1
          fi

      - name: Verify deployment status
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          echo "‚è≥ Waiting for deployment to process..."
          sleep 30
          
          SERVICE_INFO=$(curl -s "https://api.render.com/v1/services/${RENDER_SERVICE_ID}" \
            -H "accept: application/json" \
            -H "authorization: Bearer ${RENDER_API_KEY}")
          
          SERVICE_NAME=$(echo "$SERVICE_INFO" | jq -r '.name // "Unknown Service"')
          DEPLOY_STATUS=$(echo "$SERVICE_INFO" | jq -r '.serviceDetails.deploy.status // "unknown"')
          
          echo "üìã Service: ${SERVICE_NAME}"
          echo "üìä Deployment Status: ${DEPLOY_STATUS}"
          
          case "${DEPLOY_STATUS}" in
            "success"|"live")
              echo "‚úÖ Deployment completed successfully!"
              exit 0
              ;;
            "failed"|"error")
              echo "‚ùå Deployment failed!"
              exit 1
              ;;
            *)
              echo "‚ö†Ô∏è  Deployment status: ${DEPLOY_STATUS} (still processing)"
              exit 0
              ;;
          esac
